#!/usr/bin/env ruby

require 'octokit'
require 'git'
require 'graph'
require 'logger'

require 'optparse'
require 'pp'
require 'json'

require 'active_support'
require 'active_support/core_ext'

OPTS = {
    GITHUB_LOGIN:     ENV['GITHUB_LOGIN'],
    GITHUB_PASSWORD:  ENV['GITHUB_PASSWORD'],

    REMOTE:           'origin',
}

# --------------------------------------------------
# Command line arguments

optionparser = OptionParser.new{ |op|
  op.banner = "Checkouts the correct branch for a given pull request\n" +
              'Usage: gitpull [options] <PR#>'
  op.on('-l', '--login USERNAME',         'GitHub login name'                                        ) { |v|
    OPTS[:GITHUB_LOGIN]     = v }
  op.on('-p', '--password PASSWORD',      'GitHub login password'                                    ) { |v|
    OPTS[:GITHUB_PASSWORD]  = v }
  op.on('-r', '--remote REMOTENAME',      "Git remote used to find GitHub (def #{OPTS[:REMOTE]})"    ) { |v|
    OPTS[:REMOTE]           = v }

  # Help
  op.on_tail('-h', '--help', 'Show this message') do
    puts op
    exit
  end
}
optionparser.parse!

OPTS[:PULL_REQUEST_NUMBER] = (Integer(ARGV.pop) rescue nil) or begin
  puts optionparser
  exit -1
end

# --------------------------------------------------
# Setup Git client

@logger = Logger.new STDOUT
@g      = Git.open '.', log: nil  # or @logger

# --------------------------------------------------
# Setup Octokit

Octokit.configure do |config|
  config.login    = OPTS[:GITHUB_LOGIN]    or raise 'No GitHub login given'
  config.password = OPTS[:GITHUB_PASSWORD] or raise 'No GitHub password given'
end
stack = Faraday::RackBuilder.new do |builder|
  #builder.response :post
  builder.use Octokit::Response::RaiseError
  builder.adapter Faraday.default_adapter
end
Octokit.middleware = stack

# --------------------------------------------------
# Functions

def git command, *args
  @g.lib.send :command, command, args
end

def calculate_github_repo
  remote = @g.remote OPTS[:REMOTE]
  repo_user, repo_name = remote.url.split(/[\/\.\:]/)[-3..-2]
  # @logger.info "Extracted repo user '#{repo_user}' name '#{repo_name}' from remote '#{OPTS[:REMOTE]}' (#{remote.url})"
  return "#{repo_user}/#{repo_name}"
end

def fetch_pulls repo=calculate_github_repo
  @logger.debug "Fetching pull requests from #{repo}"
  pulls = Octokit.pulls(repo).map{|p| p.to_attrs.with_indifferent_access }  # Convert from Sawyer::Resources to Hashes
  cache_pulls(pulls)
end

def cache_pulls pulls
  @logger.debug "Writing pulls cache"
  File.write('./.gitpull_cached', pulls.to_json )
  pulls
end
def cached_pulls
  @cached_pulls ||= begin
    f = File.read('./.gitpull_cached') rescue nil
    # @logger.debug "Read pulls cache: #{f.to_s}" if f
    JSON.parse(f).map{|p| p.with_indifferent_access } if f
  end
end
def cached_pulls!
  @logger.debug 'Clearing pulls cache'
  @cached_pulls = nil
  cached_pulls
end

def extract_pull pulls, pullnum
  pulls.find{|p| p['number'] == pullnum }
end


# -------------------------------------------------
# MAIN SCRIPT

pullnum = OPTS[:PULL_REQUEST_NUMBER]
puts "Switching to Pull Request #{pullnum}"

# ---- Get the pull branch
pull = (cached_pulls && extract_pull(cached_pulls, pullnum)) ||
       (extract_pull(fetch_pulls, pullnum)) or
       raise "Pull number #{pullnum} NOT FOUND"
# @logger.debug "Found pull: #{pull}"

# Switch to that branch
branch = pull['head']['ref'] or "Unable to determine branch: #{pull}"
puts "Branch #{branch}"
git 'checkout', branch