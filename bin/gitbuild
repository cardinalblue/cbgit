#!/usr/bin/env ruby

require 'octokit'
require 'git'
require 'logger'

require 'optparse'
require 'pp'
require 'json'

OPTS = {
  BUILD_NAME:       'build',

  GITHUB_LOGIN:     ENV['GITHUB_LOGIN'],
  GITHUB_PASSWORD:  ENV['GITHUB_PASSWORD'],

  BASE_BRANCH:      'dev',
  REMOTE:           'origin',

  OCTOPUS_MERGE:    true,
  DO_PUSH:          true,
  AFTER_MERGE:      false,
  BUILD_NUMBER:     false,
}

INFO_FILEPATH   = './config/gitbuild.txt'

# --------------------------------------------------
# Command line arguments

OptionParser.new{ |op|
  op.banner = <<-TEXT
Creates a new build branch, merging pull requests in GitHub marked with #build.
Usage: gitbuild [name (defaults to 'build')] [options]

  TEXT
  op.on('-l', '--login USERNAME',         'GitHub login name'                                        ) { |v|
                                          OPTS[:GITHUB_LOGIN]     = v }
  op.on('-p', '--password PASSWORD',      'GitHub login password'                                    ) { |v|
                                          OPTS[:GITHUB_PASSWORD]  = v }
  op.on('-b', '--base-branch BRANCHNAME',  "Branch to use as base (def #{OPTS[:BASE_BRANCH]})"        ) { |v|
                                          OPTS[:BASE_BRANCH]      = v }
  op.on('-r', '--remote REMOTENAME',      "Git remote used to find GitHub (def #{OPTS[:REMOTE]})"    ) { |v|
                                          OPTS[:REMOTE]           = v }
  op.on('-o', '--[no-]octopus',           "Use Git octopus merge (def #{OPTS[:OCTOPUS_MERGE]})"      ) { |v|
                                          OPTS[:OCTOPUS_MERGE]    = v }
  op.on('-n', '--build-number',           "Just display build number info"                           ) { |v|
                                          OPTS[:BUILD_NUMBER]     = v }
  op.on('--[no-]push',                    "Push results to remote (def #{OPTS[:DO_PUSH]}"            ) { |v|
                                          OPTS[:DO_PUSH]          = v }
  op.on('--after-merge',                  "Merge completed manually, do post (def #{OPTS[:AFTER_MERGE]}" ) { |v|
                                          OPTS[:AFTER_MERGE]      = v }

  # Help
  op.on_tail("-h", "--help", "Show this message") do
    puts op
    exit
  end
}.parse!

# Whatever is left in ARGV is the required normal arguments
OPTS[:BUILD_NAME] = ARGV.pop unless ARGV.empty?

# --------------------------------------------------
# Setup Git client

@logger = Logger.new STDOUT
@g      = Git.open '.', log: nil  # or @logger

# --------------------------------------------------
# Setup Octokit

Octokit.configure do |config|
  config.login    = OPTS[:GITHUB_LOGIN]    or raise 'No GitHub login given'
  config.password = OPTS[:GITHUB_PASSWORD] or raise 'No GitHub password given'
end
stack = Faraday::RackBuilder.new do |builder|
  #builder.response :post
  builder.use Octokit::Response::RaiseError
  builder.adapter Faraday.default_adapter
end
Octokit.middleware = stack

# --------------------------------------------------
# Functions

def git command, *args
  @g.lib.send :command, command, args
end

# Current facts about the Github API:
#   * Pull requests API does not expose the labels.
#   * All pull requests are issues.
#   * Issues API does not expose the branch name of related pull request.
#
# Thus in order to get a list of pull requests with a given label, we need to 
# fetch the list of issues first, then select only those which are pull requests
# marked with the build label and map their numbers. Then we have to call the 
# actual PRs API and select the ones matching the above numbers.
#
ITEMS_LIMIT = 10000

def fetch_github_issues repo
  @logger.debug "Fetching issues from #{repo}"
  Octokit.issues(repo, state: :open, per_page: ITEMS_LIMIT)
end

def fetch_github_build_pulls_numbers repo
  fetch_github_issues(repo).select { |i|
    i[:pull_request] && i[:labels].find { |label| 
      label[:name] == OPTS[:BUILD_NAME]
    }
  }.map(&:number)
end

def fetch_github_build_pulls repo=calculate_github_repo
  numbers = fetch_github_build_pulls_numbers(repo).to_set
  @logger.debug "Fetching pull requests from #{repo}"
  all_pulls = Octokit.pulls(repo, state: :open, per_page: ITEMS_LIMIT)
  all_pulls.select{|p| numbers.include? p.number }
end

def calculate_github_repo
  # Figure out the repo user/name
  remote = @g.remote OPTS[:REMOTE]
  repo_user, repo_name = remote.url.split(':')[1].split(/[\/\.]/)
  @logger.info "Extracted repo user '#{repo_user}' name '#{repo_name}' from remote '#{OPTS[:REMOTE]}' (#{remote.url})"
  return "#{repo_user}/#{repo_name}"
end

def build_prefix
  "#{OPTS[:BUILD_NAME]}_"
end

def calculate_build_number
  @g.branches.inject 0 do |build_number, branch|
    if branch.name.start_with? build_prefix
      n = /\d+/.match(branch.name[build_prefix.length..-1])[0].to_i
      puts "Existing branch #{branch.name} (#{build_number})" if OPTS[:BUILD_NUMBER]
      if n > build_number
        build_number = n
      end
    end
    build_number
  end
end

# --------------------------------------------------
# MAIN SCRIPT

begin

  # --------------------------------------------------------------------
  # Figure out build number
  build_number = calculate_build_number
  puts "---- Current build number is #{build_number}"

  # Rename current branch to it
  buildbranch = "#{build_prefix}#{build_number + 1}"
  if OPTS[:BUILD_NUMBER]
    puts "---- Next build is `#{buildbranch}`"
    exit
  end

  # --------------------------------------------------------------------
  # Figure out branches we will merge, by looking for the magic tag
  pulls = fetch_github_build_pulls
  raise 'No pull requests to merge!' if pulls.empty?
  brnames = pulls.map{ |b| b.head.ref }
  puts "---- Found Github branches to build:\n#{brnames.join "\n" }"

  unless OPTS[:AFTER_MERGE]

    # First, got to base branch and pull it
    @g.checkout OPTS[:BASE_BRANCH]
    @g.pull OPTS[:REMOTE], OPTS[:BASE_BRANCH]

    # Then create a new branch and switch to it
    branch = @g.branch("tmp_#{rand 1_000_000_000_000}")
    branch.checkout

    # --------------------------------------------------------------------
    # Do the merge
    if OPTS[:OCTOPUS_MERGE]
      puts "---- Merging branches via octopus:\n#{brnames.join "\n" }"
      git :pull, OPTS[:REMOTE], *brnames
    else
      brnames.each do |brname|
        puts "---- Merging branch: #{brname}"
        @g.merge("#{OPTS[:REMOTE]}/#{brname}")

        # Check for conflicts
        conflicts = []
        @g.each_conflict do |file,_,_|
          conflicts += file
        end
        unless conflicts.empty?
          puts "Conflicts merging #{branch.name}, exiting:\n#{conflicts.join(', ')}"
          exit
        end
      end
    end

    # Done with merge
    puts '!!!! Merged !!!!'

  end

  # --------------------------------------------------------------------
  # Create branch
  puts "---- Creating branch #{buildbranch}"
  git :branch, '-m', buildbranch

  # --------------------------------------------------------------------
  # Save gitbuild info, writing a config file
  info = {
    branch:           buildbranch,
    time:             Time.now,
    github_login:     OPTS[:GITHUB_LOGIN],
    commit: {
      sha:            @g.log.first.sha,
    },
    pulls:            pulls.map{ |pull|
      [
          "\##{pull.number}",
          pull.title,
          pull.head.sha,
          pull.head.date
      ]
    },
    merges:           @g.log('-merges')[0..20].map{ |commit|
      [
          commit.date,
          commit.sha,
          commit.message
      ]
    }
  }
  File.open(INFO_FILEPATH, 'w') do |f|
    f.write JSON.pretty_generate(info)
  end
  @g.add INFO_FILEPATH
  @g.commit "added #{INFO_FILEPATH}"

  # --------------------------------------------------------------------
  # Push
  if OPTS[:DO_PUSH]
    puts "---- Pushing branch to #{OPTS[:REMOTE]}"
    @g.lib.send :command, 'push', [ OPTS[:REMOTE], buildbranch, '--set-upstream']
      # Hard to set arbitrary commands using Git client gem
  end

rescue

  # Oops, failed somehow, delete temporary branch
  @g.checkout OPTS[:BASE_BRANCH]
  branch.delete rescue nil
  raise
end
